# git shortcuts
alias ga="git add -v"
alias gaa="ga ."
alias gap="gaa -p"
alias gaas="gaa && gs"
alias gb="fzf_checkout_local"
alias gbclear="git branch | grep -v 'master\|main\|current_branch' | xargs git branch -D"
alias gbr="fzf_checkout_remote"
alias gbd="git branch -D"
alias gc="git commit -v"
alias gca="git commit --amend"
alias gcl="git checkout -"
alias gclast="git checkout -"
alias gco="git checkout"
alias gcf="gco --"
alias gcn="gco -b"
alias gd="git diff -M"
alias gdf="gd --name-only"
alias gds="gd --staged"
alias gdo="gd origin"
alias gdof="gdo --name-only"
alias gf="git fetch"
alias gl="git log"
alias gli="fzf_commit"
alias glo="gl --oneline --pretty='format:%C(yellow)%h%C(auto)%d%Creset %s %C(white) %C(cyan)%an, %C(magenta)%ar%Creset'"
alias glv="glo -p"
alias glom="gl --merges --oneline --pretty='format:%C(yellow)%h%C(auto)%d%Creset %s %C(white) %C(cyan)%an, %C(magenta)%ar%Creset'"
alias glast="git show"
alias gls="gl --stat"
alias glspec='(){ glo --grep="$1" ;}'
alias gltree="gl --all --graph --pretty='format:%C(yellow)%h%C(auto)%d%Creset %s %C(white) %C(cyan)%an, %C(magenta)%ar%Creset'"
alias gm="git merge"
alias gmm="merge_origin"
alias gp="git push"
alias gpo="gp -u origin"
alias gr="git restore --staged"
alias grs="git restore --staged ."
alias gs="git status -s"
alias gsclear="gaa . && gst && gst clear"
alias gclear="gaa . && gst && gst clear"
alias gst="git stash"
alias gsi="fzf_stash_pop"
alias gsp="gst pop"
alias gss="gst show"
alias gup="git fetch && git pull"
alias gman="update_origin"
alias gback="git reset HEAD^"
alias grsh="git reset --hard"
alias gmup="gman && gup"

# make gman both master and main compatible
update_origin() {
    dir=$PWD
        if [ "$dir" = "/Users/martin.jonsson/work/octane" ] || [ "$dir" = "/Users/martin.jonsson/work/octane-dealer-frontend" ]; then
            git checkout master
                elif [ "$dir" = "/Users/martin.jonsson/work/octane-dealer-web-app" ]
                git checkout main
}

# make gmm both master and main combatible
merge_origin() {
    dir=$PWD
        if [ "$dir" = "/Users/martin.jonsson/work/octane" ] || [ "$dir" = "/Users/martin.jonsson/work/octane-dealer-frontend" ]; then
            git merge origin/master
                elif [ "$dir" = "/Users/martin.jonsson/work/octane-dealer-web-app" ]
                git merge origin/main
}

fzf_local_branch() {
    git rev-parse HEAD > /dev/null 2>&1 || return

    git branch --color=always --sort=-committerdate |
        grep -v HEAD |
        fzf --ansi --reverse \
            --preview 'git log -n 50 --color=always --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed "s/.* //" <<< {})' |
        sed "s/.* //"
}

fzf_checkout_local() {
    git rev-parse HEAD > /dev/null 2>&1 || return

    local branch

    branch=$(fzf_local_branch)
    if [[ "$branch" = "" ]]; then
        echo "No branch selected."
        return
    fi

    # If branch name starts with 'remotes/' then it is a remote branch. By
    # using --track and a remote branch name, it is the same as:
    # git checkout -b branchName --track origin/branchName
    if [[ "$branch" = 'remotes/'* ]]; then
        git checkout --track $branch
    else
        git checkout $branch;
    fi
}

fzf_remote_branch() {
    git rev-parse HEAD > /dev/null 2>&1 || return

    git branch --color=always --all --sort=-committerdate |
        grep -v HEAD |
        fzf --ansi --reverse \
            --preview 'git log -n 50 --color=always --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed "s/.* //" <<< {})' |
        sed "s/.* //"
}

fzf_checkout_remote() {
    git rev-parse HEAD > /dev/null 2>&1 || return

    local branch

    branch=$(fzf_remote_branch)
    if [[ "$branch" = "" ]]; then
        echo "No branch selected."
        return
    fi

    # If branch name starts with 'remotes/' then it is a remote branch. By
    # using --track and a remote branch name, it is the same as:
    # git checkout -b branchName --track origin/branchName
    if [[ "$branch" = 'remotes/'* ]]; then
        git checkout --track $branch
    else
        git checkout $branch;
    fi
}

fzf_commit() {
    git log --oneline --color=always \
                              --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
                              fzf --ansi --reverse --no-sort --tiebreak=index --bind=ctrl-s:toggle-sort \
                              --bind "ctrl-m:execute:
                              (grep -o '[a-f0-9]\{7\}' | head -1 |
                               xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                              {}
    FZF-EOF"
}

fzf_stash_list() {
    git rev-parse HEAD > /dev/null 2>&1 || return

    git stash list --color=always |
        grep -v HEAD |
        fzf --ansi --reverse \
            --preview 'git stash show $(sed -E "s,^[^0-9]*([0-9]+).*$,\1," <<< {}) --color=always --date=short --pretty="format:%C(auto)%cd %h%d %s" $(awk -F"[^0-9]+" "$2" <<< {})' |
        awk -F'[^0-9]+' '{ print $2 }'
}

fzf_stash_pop() {
    git rev-parse HEAD > /dev/null 2>&1 || return
    
    local stash

    stash=$(fzf_stash_list)
    if [[ "$stash" == "" ]]; then
        echo "No stash selected."
        return
    fi

    git stash pop $stash;
}
